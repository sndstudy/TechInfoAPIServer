{"version":3,"sources":["db/tech-info-ss-serviceAccountKey.json","base_db_access.ts","qiita_db_access.ts","error_enum.ts","qiita_api.ts","hackernews_db_access.ts","hackernews_api.ts","error_info.ts","error_handler.ts","index.ts"],"names":["module","exports","type","project_id","private_key_id","private_key","client_email","client_id","auth_uri","token_uri","auth_provider_x509_cert_url","client_x509_cert_url"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["module.exports={type:\"service_account\",project_id:\"tech-info-ss\",private_key_id:\"65a2f6bb3968d74b824c9ea42edd4288043eced1\",private_key:\"-----BEGIN PRIVATE KEY-----\\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCx+FEuyvV4NrP5\\nU9oDnEF/tOjzcxF+h7VyeE9TFPD6YQOQ+gk4Klp25Ek/gaYbIeGt0IlXltpnHU+4\\n78rIfRjxYmj1bWSfVxX77VomKADAbmCtWKI20For2r87Sq3BwHM2G7vObYe3NBnY\\n23TwvMlVWHKJZG9s8V6yymo8WoxhrYFyqEgrcUwzg9h9EMrka9D2U+duP1AQCkey\\n0jqM8xFd6y1nrbZtsGEp4LaNYrp9OiSM0JRIbmfrxYF8ubfu4cnCHo0lHzL4WE7l\\n0i+zMu/+51d2gaxYSRaOaL1QAukRC1mLzrxB7V6WO+IKsfGctiuoGuRZQepso+iK\\n3Rc2FCuHAgMBAAECggEADJpr6V2CVhT0C6XJn44HwQSUDXWD8vFz9if/k7MjQGy+\\nK2l0w+KTJuGr/EOkRz42TknuOy+Zxn0Em2SqRPNy+j+NWxNE2At7QsZNJyMxfNWN\\n1bwCoZ4bD9YwZIFsqt1qa0kG597JO/FqtfkPBknGrXTgVTF+U8YHsXxBjlLQdGd0\\nclhuy09qBqc2gYHtieJ2w5b6t5r5QlQweDY+tUvOukXQ3v+6cgT41cURCpqsw8k3\\n2XTpergNsp9C2Q+MZkzbrMtl3vGplXpXfjUhLerTD83FlUrJ3Z70yJDkgk2ucO4J\\nN3SInmBU2/O35yse0NHzfR2cD6my8ObKA2UDB4PX4QKBgQD4pqve6uSDGIO/I02V\\nEloY8PkulPXMHzSb+1FKYUeA03d0Wui8TN9lUIP8ILNIF1KoVdVpmWcFJAbJoFn5\\nt4d69RhPXEo5dhgUls/Cn234DuldSVQXwEDPu9GVK+7keki5AOmI3ECRkD343b+7\\n6efljZT4tZnLVTpfD2Rmm8Jh5wKBgQC3Otzm5bDm40a6MElPomwk9Sg+0KqQj6K+\\nA1o7VBQ70TJvEFgDSwSOBN3F2u0HSUtFotBxn1b4BUywX9/CTm2hqfHNG7OUY3LQ\\n5XufdnMCJsNyyjULu2TOYvGaWqRwbL8k3WIh8bdeENfJhTX35rZn6Z/c+VOu7jCl\\nFyhEJw31YQKBgG8sZjAXKfCLZ2xwZmG+gNYh9+eh5nxLf4Q2S9RLxmKNKh21/9Uh\\nMcjkxP5XyJD1DJoDNpYuZmdgAkDoFxKVwldxelsRUoZ6jK23+FB2Y/7C/Agfnx+3\\nb8LxoPVnXTp+ikFdbQ0qHRx4N50r2Gw2Wt7B/NduqsLE6oJSKXvPLIwFAoGACr6N\\n45BGflOHezWHpv7MPqKNmJld1xpFHcVOjjoQ8a0DuxWHQ7IrczR/2LFMwueeXVf9\\nxxvj2qlc5N7KXTeCID+56SAduK7YNb2vMRueBNtHDL0kvSpg7+VHa5izGdCWqM++\\niGUHLqHoNW31SzMhMRi3AhswuApJmfSwrMZpgCECgYAF7jUC/PuTw7F+hc7xVUfs\\npJF/KgTpikw3OumrWFLdvuv7hMVuQVQK2Cq4qTJlZn+JZspHwMt8kpDI371g+beQ\\nzYmk65FSqlMBpWAnR89DmuyWWI4Ps/XUbc9WjSSkXH4UCR5O01nKBgCM/q9kvupL\\nQB7QwsRelDWbEBAgn99cKw==\\n-----END PRIVATE KEY-----\\n\",client_email:\"firebase-adminsdk-1jtv8@tech-info-ss.iam.gserviceaccount.com\",client_id:\"100964475142793841712\",auth_uri:\"https://accounts.google.com/o/oauth2/auth\",token_uri:\"https://oauth2.googleapis.com/token\",auth_provider_x509_cert_url:\"https://www.googleapis.com/oauth2/v1/certs\",client_x509_cert_url:\"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-1jtv8%40tech-info-ss.iam.gserviceaccount.com\"};","import * as firebase from \"firebase-admin\";\nimport * as serviceAccount from \"./tech-info-ss-serviceAccountKey.json\";\nimport { IItemResponse } from \"../dto/item_response.js\";\n\nexport abstract class BaseDbAccess {\n\n    protected static app: firebase.app.App = firebase.initializeApp({\n        credential: firebase.credential.cert({...serviceAccount} as firebase.ServiceAccount),\n    });\n\n    constructor(){}\n\n    abstract async selectItems(targetSeconds: number, tagName: string) : Promise<IItemResponse[]>;\n\n    abstract async insertItems(itemData: IItemResponse[], nowSeconds: number, tagName: string) :Promise<void>;\n\n}","import { BaseDbAccess } from \"./base_db_access\";\nimport { IItemResponse } from \"../dto/item_response\";\n\nexport class QiitaDbAccess extends BaseDbAccess {\n\n  async selectItems(targetSeconds: number, tagName: string): Promise<IItemResponse[]> {\n    \n    const db: FirebaseFirestore.Firestore = BaseDbAccess.app.firestore();\n    const docRef: FirebaseFirestore.DocumentReference = db.collection(\"qiita\").doc(tagName);\n    const collections: FirebaseFirestore.CollectionReference[] = \n      await docRef.getCollections().catch(() => {throw new Error(\"Firebase エラー\")});;\n    \n    // 8時間以内のデータがあるか確認(現在時刻から8時間前と比較)\n    const selectResult: FirebaseFirestore.CollectionReference = collections.find((colRef: FirebaseFirestore.CollectionReference) => {\n      return +colRef.id > targetSeconds;\n    });\n\n    const returnItems: IItemResponse[] = [];\n\n    if(selectResult){\n      const data: FirebaseFirestore.QuerySnapshot = \n        await db.collection(\"qiita\").doc(tagName).collection(selectResult.id).get().catch(() => {throw new Error(\"Firebase エラー\")});;\n      \n      data.forEach((snapshot: FirebaseFirestore.QueryDocumentSnapshot ) => {\n        returnItems.push(snapshot.data() as IItemResponse);\n      });\n    }\n\n    return returnItems;\n\n  }\n\n  async insertItems(itemData: IItemResponse[], nowSeconds: number, tagName: string): Promise<void> {\n          \n    const db: FirebaseFirestore.Firestore = BaseDbAccess.app.firestore();\n    const batch: FirebaseFirestore.WriteBatch = db.batch();\n  \n    for(let data of itemData) {\n      const docRef: FirebaseFirestore.DocumentReference = db.collection(\"qiita\").doc(tagName).collection(`${nowSeconds}`).doc();\n      batch.set(docRef, data);\n    }\n\n    await batch.commit().catch(() => {throw new Error(\"Firebase エラー\")});;\n  }\n\n}","export enum ErrorEnum{\n    NotFound = 404,\n    MethodNotAllowed = 405,\n    InternalServerError= 500,\n}","import axios from \"axios\";\nimport * as Express from \"express\";\nimport { QiitaDbAccess } from \"../db/qiita_db_access\";\nimport { IItemResponse } from \"../dto/item_response\";\nimport { IAxiosResponse } from \"../dto/axios_response\";\nimport { IQiitaResponse } from \"../dto/qiita_response\";\nimport { ErrorEnum } from \"../error/error_enum\";\n\nexport const router = Express.Router();\n\nrouter.route(\"/\").get(async (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\n\n  try {\n\n    const params: any = { \n      params: {\n        page: req.query.page || 1,\n        per_page: req.query.perPage || 20,\n        query: (req.query.query)? `tag:${req.query.query}` : 'tag:JavaScript',\n      },\n    };\n\n    // DBselect 時間　（8時間に一回取得する）\n    const nowSeconds: number = Math.floor(Date.now() / 1000);\n    const targetSeconds: number = nowSeconds - (60 * 60 * 8);\n\n    // コレクション一覧取得\n    const qiitaDb: QiitaDbAccess = new QiitaDbAccess();\n    let itemData: IItemResponse[]  = await qiitaDb.selectItems(targetSeconds, req.query.query);\n\n    if(itemData.length === 0){\n\n      // Qiita APIから取得する処理\n      const response: IAxiosResponse =\n          await axios.get<IAxiosResponse>(\"https://qiita.com/api/v2/items\", params).catch(\n                                          (err: IAxiosResponse): IAxiosResponse => {\n                                            throw new Error(\"axios エラー\");\n                                          });\n\n      const data: IQiitaResponse[]  = response.data;\n\n      // 必要なものだけ取り出す\n      itemData = data.map((item) => {\n          return {\n              tags: (req.query.query)?[req.query.query] : ['Javascript'],\n              title: item.title,\n              url: item.url,\n              tweetUrl: `https://twitter.com/intent/tweet?text=${item.title}&url=${item.url}`,\n          };\n\n      });\n\n      qiitaDb.insertItems(itemData, nowSeconds, req.query.query || 'javascript');\n    }\n\n    return res.json(itemData);\n\n  } catch(err) {\n    return next(ErrorEnum.InternalServerError);\n  }\n\n}).post(async (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\n    return next(ErrorEnum.MethodNotAllowed);\n}).put(async (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\n    return next(ErrorEnum.MethodNotAllowed);\n}).delete(async (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\n    return next(ErrorEnum.MethodNotAllowed);\n});\n","import { BaseDbAccess } from \"./base_db_access\";\nimport { IItemResponse } from \"../dto/item_response\";\n\nexport class HackerNewsDbAccess extends BaseDbAccess {\n\n  async selectItems(targetSeconds: number, tagName: string): Promise<IItemResponse[]> {\n    \n    const db: FirebaseFirestore.Firestore = BaseDbAccess.app.firestore();\n    const docRef: FirebaseFirestore.DocumentReference = db.collection(\"hackernews\").doc(tagName);\n    const collections: FirebaseFirestore.CollectionReference[] = \n      await docRef.getCollections().catch(() => {throw new Error(\"Firebase エラー\")});\n    \n    // 8時間以内のデータがあるか確認(現在時刻から8時間前と比較)\n    const selectResult: FirebaseFirestore.CollectionReference = collections.find((colRef: FirebaseFirestore.CollectionReference) => {\n      return +colRef.id > targetSeconds;\n    });\n\n    const returnItems: IItemResponse[] = [];\n\n    if(selectResult){\n      const data: FirebaseFirestore.QuerySnapshot = \n        await db.collection(\"hackernews\").doc(tagName).collection(selectResult.id).get().catch(() => {throw new Error(\"Firebase エラー\")});;\n      \n      data.forEach((snapshot: FirebaseFirestore.QueryDocumentSnapshot ) => {\n        returnItems.push(snapshot.data() as IItemResponse);\n      });\n    }\n\n    return returnItems;\n\n  }\n\n  async insertItems(itemData: IItemResponse[], nowSeconds: number, tagName: string): Promise<void> {\n          \n    const db: FirebaseFirestore.Firestore = BaseDbAccess.app.firestore();\n    const batch: FirebaseFirestore.WriteBatch = db.batch();\n  \n    for(let data of itemData) {\n      const docRef: FirebaseFirestore.DocumentReference = db.collection(\"hackernews\").doc(tagName).collection(`${nowSeconds}`).doc();\n      batch.set(docRef, data);\n    }\n\n    await batch.commit().catch(() => {throw new Error(\"Firebase エラー\")});;\n  }\n\n}","import axios from \"axios\";\nimport * as Express from \"express\";\nimport { HackerNewsDbAccess } from \"../db/hackernews_db_access\";\nimport { IItemResponse } from \"../dto/item_response\";\nimport { IAxiosResponse } from \"../dto/axios_response\";\nimport { IHackerNewsResponse } from \"../dto/hackernews_response\";\nimport { ErrorEnum } from \"../error/error_enum\";\nimport { runInNewContext } from \"vm\";\n\nexport const router = Express.Router();\n\nrouter.route(\"/\").get(async (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\n\n  try {\n    const params: any = { \n      params: {\n        hitsPerPage: req.query.perPage || 20,\n        query: req.query.query || 'javascript',\n        tags: req.query.tags || 'story',\n      },\n    };\n\n    // DBselect 時間　（8時間に一回取得する）\n    const nowSeconds: number = Math.floor(Date.now() / 1000);\n    const targetSeconds: number = nowSeconds - (60 * 60 * 8);\n\n    // コレクション一覧取得\n    const hackernewsDb: HackerNewsDbAccess = new HackerNewsDbAccess();\n\n    let itemData: IItemResponse[] = await hackernewsDb.selectItems(targetSeconds, req.query.query);\n    \n    if(itemData.length === 0){\n\n        // Hacker News APIから取得する処理\n        const response: IAxiosResponse = await axios.get<IAxiosResponse>(\"http://hn.algolia.com/api/v1/search_by_date\", params).catch(\n                                              (err: IAxiosResponse): IAxiosResponse => {\n                                                  throw new Error(\"axios エラー\");\n                                              });\n\n        const data: IHackerNewsResponse  = response.data;\n\n        // 必要なものだけ取り出す\n        itemData = data.hits.map((item) => {\n            return {\n                tags: (req.query.query)?[req.query.query] : ['javascript'],\n                title: item.title,\n                url: item.url,\n                tweetUrl: `https://twitter.com/intent/tweet?text=${item.title}&url=${item.url}`,\n            };\n        });\n\n          await hackernewsDb.insertItems(itemData, nowSeconds, req.query.query || 'javascript');\n    }\n\n    return res.status(200).json(itemData);\n\n  } catch (err) {\n    return next(ErrorEnum.InternalServerError);\n  }\n\n}).post(async (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\n    return next(ErrorEnum.MethodNotAllowed);\n}).put(async (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\n    return next(ErrorEnum.MethodNotAllowed);\n}).delete(async (req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\n    return next(ErrorEnum.MethodNotAllowed);\n});","export class ErrorInfo {\n\n    public statusCode: number;\n\n    public message: string;\n\n    public errorObj?: Error;\n\n    constructor(statusCode: number, message: string, errorObj?: Error){\n        this.statusCode = statusCode;\n        this.message = message;\n        this.errorObj = errorObj; \n    }\n\n}","import * as Express from \"express\";\nimport { ErrorEnum } from \"./error_enum\";\nimport { ErrorInfo } from \"./error_info\";\n\nexport const errorHandler = (errCode: number, req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\n    \n    switch (errCode){\n        case ErrorEnum.NotFound:\n            return res.status(ErrorEnum.NotFound).json(new ErrorInfo(ErrorEnum.NotFound, \"Not Found\"));\n        case ErrorEnum.MethodNotAllowed:\n            return res.status(ErrorEnum.MethodNotAllowed).json(new ErrorInfo(ErrorEnum.MethodNotAllowed, \"Method Not Allowed\"));\n        default:\n            return res.status(ErrorEnum.InternalServerError).json(new ErrorInfo(ErrorEnum.InternalServerError, \"Internal Server Error\"));\n    }\n\n};","import * as Express from \"express\";\r\nimport { router as QiitaApi } from \"./api/qiita_api\";\r\nimport { router as HackerNewsApi } from \"./api/hackernews_api\";\r\nimport { errorHandler } from \"./error/error_handler\";\r\n\r\nconst app = Express();\r\n\r\n// CORSを許可する\r\napp.use((req: Express.Request, res: Express.Response, next: Express.NextFunction) => {\r\n    res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n    res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\r\n    next();\r\n});\r\n\r\napp.use('/qiita', QiitaApi);\r\napp.use('/hackernews', HackerNewsApi);\r\napp.use(errorHandler);\r\n\r\napp.listen(process.env.PORT || 3000);\r\n"]}